---
title: "Task 1: Hydrology, Climate, and Water Supply Data Inventory for Pilot Parks"
author: "Kathryn Willi, Caitlin Mothes"
format: html
editor: visual
---

*Text from the original SOW:*

Water, in adequate quantity and quality, is essential for National Park Service (NPS) operations, including providing water for visitors, park staff, firefighting activities, irrigation, stock watering, restoration efforts, and concessions. While it is believed many NPS water supplies are sensitive to climate change, few have been evaluated for climate vulnerability. Aging NPS water supply infrastructure, increasing NPS water demands, and added stresses on water supply sources from population growth and commercial development near parks are necessitating significant capital investments in NPS water supply systems; such investment decisions should consider climate change and be informed by science.

This project will evaluate the influence of climate change on the security of NPS water supplies, beginning with parks in hydrologic settings most likely to experience supply challenges. If a current or possible future water supply is found to be sensitive to climate change and projected to experience climate-related changes that will impair that supply's quantity and/or quality, adaptation actions can be undertaken to further secure that water supply (e.g., increase water conservation at the site, reduce existing losses in the transmission of water, increase water storage to help weather periods of drought, or consider less sensitive, alternate sources for water).

The overall goal of this project is to prepare NPS for addressing critical climate change-related water supply challenges through:

1.  Inventorying available data and information describing park climate, hydrology, and water supplies;

2.  Identifying data gaps;

3.  Selecting existing or developing new methods for evaluating water supply climate-sensitivity and exposure;

4.  Conducting climate change vulnerability assessments (CCVAs);

5.  Predicting future climate conditions and resulting changes to NPS water supplies; and lastly

6.  Developing recommendations for water supply-related adaptation strategies.

This report aims to update NPS on our progress related to Points 1 and 2, which encompass **Task 1 in our Statement of Work:**

1.  Compile available data and information describing the hydrology, climate, and water supplies of priority NPS-identified parks (e.g., DEVA, JOTR, and MOJA).

-   Examples: Hydrologic data may include stream and spring flow data, groundwater level data, and water quality data associated with specific sources of NPS water supplies or suitable analogs. This may also include information describing contributing basins (e.g., catchment areas, groundwater recharge areas, surface water/groundwater interaction, and output from water balance models). Climate data may include historical precipitation and temperature data and locations and monitored parameters of weather stations and SNOTEL sites. Water supply information may include types of supplies (i.e., surface water or groundwater), point-of-diversion locations, diversion amounts, NPS-observed supply challenges, etc.â€¯

Here we present an inventory of data found for three National Parks with varying levels of available data: Death Valley, Mojave Desert, and Joshua Tree.

# Death Valley National Park (DEVA)

```{r}
library(tidyverse)
library(mapview)
library(lubridate)


mapviewOptions(basemaps.color.shuffle=FALSE,basemaps=c('CartoDB.Positron', 'CartoDB.DarkMatter', 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'))

plyr::ldply(list.files(path="src/",
                       pattern="*.R",
                       full.names=TRUE),
            source)

park <- c("DEVA")

dist <- 0.2

# Load in all inventory data

aoi <- getParkBoundary(park=park)

omernik <- downloadOmernik(aoi = aoi)

nhd <- getNHD(aoi = aoi, dist = dist)
  flowlines <- nhd$flowlines
  waterbodies <- nhd$waterbodies
```

**Park basics**

Death Valley National Park (DEVA) was established in \_\_ and is located in the `r if(n_distinct(omernik$NA_L3NAME)==1){print(unique(omernik$NA_L3NAME))} else {print(paste0(unique(omernik$NA_L3NAME), collapse=" and "), quote=FALSE)}` level three ecregion`r if(n_distinct(omernik$NA_L3NAME)>1){print('s')}` (Omernik & Griffith, 2014) of \_\_\_ and \_\_. Since \_\_, visitor use has \_\_ at a rate of \_\_, with the highest attendance recorded as \_\_ in \_\_. There are approximately \_\_ designated areas within \_\_ miles of the park, with \_\_ being the largest with a population of \_\_.

# NWIS

**An inventory of available flow data from the US Geological Survey (USGS)'s National Water Information System.**

```{r}
nwis_inventory <- pullFlowUSGS(aoi = aoi, dist = dist) 

current_nwis <- nwis_inventory %>%
  filter(lubridate::year(end_date) == lubridate::year(Sys.Date())) %>%
  mutate(parameter_type=paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range=paste0(year(begin_date),"-",year(end_date))) %>%
  # look through old work flow for date range pretty and list of parameters
  select(site_no,site_name,parameter_type,date_range,n_obs,within_park)

old_nwis <- nwis_inventory %>%
  filter(lubridate::year(end_date) < lubridate::year(Sys.Date())) %>%
  mutate(parameter_type=paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range=paste0(year(begin_date),"-",year(end_date))) %>%
  # look through old work flow for date range pretty and list of parameters
  select(site_no,site_name,parameter_type,date_range,n_obs,within_park)
```

There are `r as.numeric(current_nwis %>% filter(within_park == "Within") %>% distinct(site_no) %>% n_distinct())` USGS gages that have collected data in `r lubridate::year(Sys.Date())` within `r park` 's park boundary. There are an additional `as.numeric(current_nwis %>% filter(is.na(within_park)) %>% distinct(site_no) %>% n_distinct())` monitoring locations when one extends outside of the park (by `r dist` decimal degrees, approximately `dist*11.1` km).

```{r}
mapview(current_nwis, zcol='within_park', layer.name='Location') + #col.regions="#F0E442")+
  #mapview(quantity,col.regions="#0072B2")+
  mapview(aoi,col.regions="#009E73",alpha=0.8, layer.name = "Park Unit")
```

```{r}
current_nwis %>%
  sf::st_drop_geometry() %>%
 arrange(desc(site_name)) %>%
  #mutate(grouped=ifelse(is.na(grouped),"Not captured by aggreagting mechanism",grouped)) %>%
  kableExtra::kable(.,'html',caption='Current (2022) NWIS Locations') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='800px',height='500px')
```

```{r}
mapview(old_nwis, zcol='within_park', layer.name = 'Location') + 
  #col.regions="#F0E442")+
  #mapview(quantity,col.regions="#0072B2")+
  mapview(aoi,col.regions = "#009E73", alpha = 0.8, layer.name = paste0(park))
```

```{r}
old_nwis %>%
  sf::st_drop_geometry() %>%
  arrange(desc(site_name)) %>%
  #mutate(grouped=ifelse(is.na(grouped),"Not captured by aggreagting mechanism",grouped)) %>%
  kableExtra::kable(.,'html',caption='Older (< 2022) NWIS Locations') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='800px',height='500px')
```

# Aquarius

```{r}
aquarius <- downloadAquarius(park="DEVA")

aquarius_inventory <- cleanAquarius('data/aquarius/raw_yuck/') %>%
  mutate(timestamp=ymd_hms(timestamp),
         year=year(timestamp)) %>%
  group_by(siteID, parameter) %>%
  summarize(count=n_obs(),
            year=paste0(min(year),"-",max(year)))
```

# WQP

```{r}
sites <- downloadWQPSites(aoi,dist) %>%
  mutate(long = unlist(map(sites$geometry,1)),
         lat = unlist(map(sites$geometry,2))) %>%
  sf::st_drop_geometry()
                       
#
data <- downloadWQPData(sites=sites) %>%
  rename(SiteID=MonitoringLocationIdentifier,
         date=ActivityStartDate,
         time=ActivityStartTime.Time,
         parameter=CharacteristicName,
         org=OrganizationFormalName,
         org_id=OrganizationIdentifier,
         value=ResultMeasureValue,
         original_units=ResultMeasure.MeasureUnitCode,
         sample_method=SampleCollectionMethod.MethodName,
         analytical_method=ResultAnalyticalMethod.MethodName,
         particle_size=ResultParticleSizeBasisText,
         media=ActivityMediaName,
         type=ActivityMediaSubdivisionName,
         sample_depth=ActivityDepthHeightMeasure.MeasureValue,
         sample_depth_unit=ActivityDepthHeightMeasure.MeasureUnitCode,
         fraction=ResultSampleFractionText,
         status=ResultStatusIdentifier) %>%
         group_by(SiteID) %>%
         sf::st_drop_geometry() %>%
         mutate(year=year(date(date))) %>%
         summarize(total_obs=n(),
            total_parms=n_distinct(parameter),
            parm_list=paste0(unique(parameter), collapse=", "),
            range=ifelse(min(year) == max(year),
                         paste0(min(year)), 
                         paste0(min(year),'-',max(year)))) %>%
  sf::st_as_sf(coords=c('long','lat'), crs = 4326)

data %>%
  arrange(desc(range)) %>%
  #mutate(grouped=ifelse(is.na(grouped),"Not captured by aggreagting mechanism",grouped)) %>%
  kableExtra::kable(.,'html',caption='All WQP') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='800px',height='500px')
```

```{r}
mapview(data, zcol='total_parms', layer.name = 'Total Parameters') + 
  #col.regions="#F0E442")+
  #mapview(quantity,col.regions="#0072B2")+
  mapview(aoi,col.regions = "#009E73", alpha = 0.8, layer.name = paste0(park))
```
