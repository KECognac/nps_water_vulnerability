---
title: "Task 1: Hydrology, Climate, and Water Supply Data Inventory for Pilot Parks"
author: "Kathryn Willi (ROSSyndicate), Caitlin Mothes (Geospatial Centroid)"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(mapview)
library(lubridate)


mapviewOptions(basemaps.color.shuffle=FALSE,basemaps=c('CartoDB.Positron', 'CartoDB.DarkMatter', 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'))

try(plyr::ldply(list.files(path="src/",
                       pattern="*.R",
                       full.names=TRUE),
            source))

park <- c("DEVA","MOJA","JOTR")

dist <- 0.3

park_boundary <- getParkBoundary(park=park)

park_buffer <- park_boundary %>% 
    sf::st_buffer(., dist = dist)

watershed <- getWatersheds(aoi = park_boundary, dist = 0)

# flowlines <- hydro_network$flowlines %>%
#   filter(!is.na(gnis_name))
# watershed <- hydro_network$watersheds

aquifers <- downloadAquifers(aoi=park_boundary, dist = dist)

aoi <- sf::st_union(watershed, aquifers, park_boundary) %>%
  summarize()
```

# WATER RIGHTS

```{r}
nv_water_rights <- getPODNevada(aoi=aoi, dist=0)  %>%
   saveRDS('data/all/nv_water_rights.RDS')
nv_water_rights <- readRDS('data/all/nv_water_rights.RDS') %>%
  mutate(POD_UNIT="ACRE FEET") %>%
  select(APP=app, SOURCE_NAME=source_des, DIRECT_DIV_AMOUNT=diversio_1, POD_UNIT, POD_STATUS=app_status,
         DIVERSION_TYPE=source, STORAGE_TYPE=mou, OWNER=owner_name, PARK_RIGHT) %>%
  mutate(STATE = "NV")

 ca_water_rights <- geteWRIMS(aoi=aoi, dist=0) %>%
   saveRDS('data/all/ca_water_rights.RDS')
ca_water_rights <- readRDS('data/all/ca_water_rights.RDS') %>% 
  dplyr::select(WR_WATER_RIGHT_ID, SOURCE_NAME, DIRECT_DIV_AMOUNT, POD_UNIT, POD_STATUS, 
                DIVERSION_TYPE, STORAGE_TYPE, OWNER=LAST_NAME, PARK_RIGHT=park_right) %>%
  mutate(STATE = "CA")

both_wr <- sf::st_union(nv_water_rights,ca_water_rights)

rights_ws <- sf::st_intersection(both_wr,watershed)
rights_aquifer <- sf::st_intersection(both_wr,aquifers)
rights_park <- sf::st_intersection(both_wr,park_buffer)

# ggplot() +
#   theme_void() +
#   geom_sf(data = aquifers, color = NA, aes(fill = OBJECTID_1), alpha = 0.75) +
#   geom_sf(data = watershed, color = "#abddde", fill = "#abddde", alpha=0.2) +
#   #scale_fill_manual(values = wesanderson::wes_palette("Zissou1", n = 4))+
#   geom_sf(data = ca_water_rights, alpha = 0.75, size=1.5, aes(shape = PARK_RIGHT)) +
#   geom_sf(data = park_boundary, fill = NA, color="black", size=0.1) +
#   scale_fill_gradientn(colours = pal_aq) +
#   theme(legend.position="none",
#         plot.title=element_text(hjust=0, vjust=0)) +
#   guides(fill=FALSE, color=FALSE) +
#   ggtitle("Water Right Points-of-Diversion")

pal_ws <- wesanderson::wes_palette("FantasticFox1", 50, type = "continuous")
pal_aq <- wesanderson::wes_palette("Zissou1", 29, type = "continuous")

mapview::mapview(watershed, col.region="#abddde", alpha.regions=0.9, popup=NULL, legend=F, homebutton=FALSE, label=FALSE) + 
mapview::mapview(aquifers, col.regions = pal_aq, zcol="OBJECTID_1", popup=FALSE, legend=F, homebutton=FALSE, label=FALSE) + 
mapview::mapview(park_boundary, col.region="black", alpha.regions=0, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE) +
mapview::mapview(list(nv_water_rights, ca_water_rights), 
                 col.regions = list(c("black","light grey"), c("black","light grey")), 
                 zcol = "PARK_RIGHT",
                 alpha.region=1, 
                 cex = 4,
                 legend = list(FALSE,TRUE),
                 layer.name = list(c("","Point-of-Diversion")))
```

# NWIS Locations

```{r}
nwis_sites <- pullNWIS(aoi = aoi, dist = 0) %>%
  mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
  filter(threshold == "Current") %>%
mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
                   grepl("GW|GW-", site_type_cd) ~ "Groundwater",
                   site_type_cd %in% c("SP") ~ "Spring",
                   site_type_cd %in% c("ST","ST-TS") ~ "Stream",
                   site_type_cd %in% c("SB-CV") ~ "Cave",
                   site_type_cd %in% c("ST-CA","ST-DCH") ~ "Canal/Ditch",
                   site_type_cd == "ES" ~ "Estuary",
                   site_type_cd == "LK" ~ "Lake",
                   site_type_cd %in% c("SB") ~ "Subsurface",
                   site_type_cd == "SB-GWD" ~ "Ground-water Drain",
                   site_type_cd == "SB-TSM" ~ "Shaft/Tunnel",
                   site_type_cd == "SB-GWD" ~ "Ground-water Drain",
                   site_type_cd == "SB-UZ" ~ "Unsaturated Zone")) %>%
  saveRDS('data/all/nwis_sites.RDS')
nwis_sites <- readRDS('data/all/nwis_sites.RDS') %>%
  select(site_no, site_name, stie_type, parameter_type, date_range, n_obs, threshold, flow_data) 
```

```{r}
recharge <- downloadRecharge(aoi = aoi, dist = 0)

pal_recharge <- wesanderson::wes_palette("Zissou1", 150, type = "continuous")

mapview(recharge[[1]], col.regions = pal_recharge, layer.name= "Monthly Groundwater Recharge Index") + 

mapview::mapview(park_boundary, col.regions="black", alpha.regions=0, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE) +
  mapview::mapview(aquifers, col.regions = "black", popup=FALSE, legend=F, lwd =1, alpha.regions=0, homebutton=FALSE, label=FALSE)
```

```{r}
visitor_stats <- getVisitation(type='park', startYear = 1900, endYear = 2022, units = park )
```

**Park basics**

Death Valley National Park (DEVA) was established in \_\_ and is located in the `r if(n_distinct(omernik$NA_L3NAME)==1){print(unique(omernik$NA_L3NAME))} else {print(paste0(unique(omernik$NA_L3NAME), collapse=" and "), quote=FALSE)}` level three ecregion`r if(n_distinct(omernik$NA_L3NAME)>1){print('s')}` (Omernik & Griffith, 2014) of \_\_\_ and \_\_. Since \_\_, visitor use has \_\_ at a rate of \_\_, with the highest attendance recorded as \_\_ in \_\_. There are approximately \_\_ designated areas within \_\_ miles of the park, with \_\_ being the largest with a population of \_\_.

# Pulling geospatial data

We have developed code to download data from any of the data sets above that is contained within either 1) the park unit boundary, 2) watersheds associated with the park boundary, or 3) shallow aquifers associated with the park boundary.

**An inventory of available data from the US Geological Survey (USGS)'s National Water Information System.**

```{r}
nwis_inventory <- pullFlowUSGS(aoi = aoi, dist = dist) 

current_nwis <- nwis_inventory %>%
  mutate(threshold=ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type=paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range=ifelse(lubridate::year(begin_date)==lubridate::year(end_date), lubridate::year(end_date), paste0(year(begin_date),"-",year(end_date)))) %>%
mutate(flow_data=ifelse(grepl("discharge|flow|height|level|width",parameter_type,ignore.case=T)&!grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  select(site_no,site_name,parameter_type,date_range,n_obs,within_park,threshold,flow_data)
```

There are `r as.numeric(current_nwis %>% filter(within_park == "Within", threshold=="Current") %>% distinct(site_no) %>% n_distinct())` USGS gages that have collected data since `r lubridate::year(Sys.Date())-5` within `r park` 's park boundary. There are an additional `as.numeric(current_nwis %>% filter(within_park=="Outside", threshold=="Current") %>% distinct(site_no) %>% n_distinct())` monitoring locations when one extends outside of the park (by `r dist` decimal degrees, approximately `dist*11.1` km).

```{r}
  mapview(filter(current_nwis, threshold == "Current"), zcol='flow_data', layer.name = 'Current Data') + 
  mapview(filter(current_nwis, threshold == "Old"), zcol='flow_data', cex=3, alpha = 1, layer.name = 'Older NWIS Locations') +
  mapview(aoi,col.regions="#009E73",alpha = 1, legend = F)
```

## Current Flow Data

```{r}
current_nwis %>%
  filter(flow_data=="Flow",
         threshold=="Current") %>%
  sf::st_drop_geometry() %>%
  arrange(desc(site_name)) %>%
  kableExtra::kable('html') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='900px',height='500px')
```

# Aquarius

```{r}
#aquarius <- downloadAquarius(park="DEVA") 
aquarius <- read_csv('data/quarto/aquarius.csv')

aquarius_inventory <- aquarius %>%
  mutate(timestamp = ymd_hms(timestamp),
         year = year(timestamp)) %>%
  group_by(siteID, Location.Type, parameter, Long, Lat, EPSG) %>%
  summarize(n_obs = n(),
            threshold = ifelse(max(year) >= (lubridate::year(Sys.Date())-5), "Current", "Old"),
            range = ifelse(min(year) == max(year), paste0(min(year)), paste0(min(year), "-", max(year)))) %>%
  mutate(flow_data=ifelse(grepl("velocity|WaterPressure|discharge|flow|height|level|stage|depthtowater",parameter,ignore.case=T)&!grepl("sediment",parameter,ignore.case=T), "Flow", "Other")) %>%
  sf::st_as_sf(coords=c("Lat","Long"), crs=4326)
```

There are `r aquarius_inventory %>% as_tibble() %>%  dplyr::filter(threshold == "Current") %>% distinct(siteID, .keep_all = FALSE) %>% n_distinct()` Aquarius monitoring locations that have collected data since `r lubridate::year(Sys.Date())-5` within `r park` 's park boundary. `r as.numeric(aquarius_inventory %>% as_tibble() %>% filter(threshold=="Current" & flow_data=="Flow") %>% distinct(siteID,.keep_all=F) %>% n_distinct())` of those sites monitor flow-related parameters.

```{r}
mapview(filter(aquarius_inventory, threshold == "Current"), zcol='flow_data', layer.name = 'Current Data') + 
  mapview(filter(aquarius_inventory, threshold == "Old"), zcol='flow_data', cex=3, alpha = 1, layer.name = 'Older Aquarius Locations') +
  mapview(aoi,col.regions="#009E73",alpha = 1, legend = F)

```

```{r}
aquarius_inventory %>%
  filter(flow_data=="Flow",
         threshold=="Current") %>%
  sf::st_drop_geometry() %>%
  arrange(desc(siteID)) %>%
  kableExtra::kable('html') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='900px',height='500px')
```

# WQP

```{r}
sites <- downloadWQPSites(aoi,dist)

data <- downloadWQPData(sites=sites) %>%
  rename(SiteID=MonitoringLocationIdentifier,
         date=ActivityStartDate,
         time=ActivityStartTime.Time,
         parameter=CharacteristicName,
         org=OrganizationFormalName,
         org_id=OrganizationIdentifier,
         value=ResultMeasureValue,
         original_units=ResultMeasure.MeasureUnitCode,
         sample_method=SampleCollectionMethod.MethodName,
         analytical_method=ResultAnalyticalMethod.MethodName,
         particle_size=ResultParticleSizeBasisText,
         media=ActivityMediaName,
         type=ActivityMediaSubdivisionName,
         sample_depth=ActivityDepthHeightMeasure.MeasureValue,
         sample_depth_unit=ActivityDepthHeightMeasure.MeasureUnitCode,
         fraction=ResultSampleFractionText,
         status=ResultStatusIdentifier)
```

# Water Rights

```{r}
water_rights <- geteWRIMS(aoi=aoi, dist=dist)
```

We were unable to access several relevant data sets:

-   NPS geospatial layer representing [all buildings within park units](https://mapservices.nps.gov/arcgis/rest/services/NationalDatasets). The layer appears to be broken. We intend to use this geospatial layer to identify locations that water is sent to, in an attempt to make a first pass at where NPS water rights go, and where water rights might be leased.

-   Worklow linked to customizing outputs for the [*What water balance product do you need?*](https://screenedcleanedsummaries.s3.us-west-2.amazonaws.com/which_water_balance.html)dataset*.* This requires NPS VPN access. Currently, we are just pulling the pre-existing datasets, and clipping their geometries to the areas of interest.

-   [Projections of freshwater use in the United States under climate change](https://www.fs.usda.gov/research/treesearch/63896). We are unable to find the public dataset, but we have reached out to the primary author for access.
