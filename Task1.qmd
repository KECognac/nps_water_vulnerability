---
title: "Task 1: Hydrology, Climate, and Water Supply Data Inventory for Pilot Parks"
author: "Kathryn Willi (ROSSyndicate), Caitlin Mothes (Geospatial Centroid)"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(mapview)
library(lubridate)


mapviewOptions(basemaps.color.shuffle=FALSE,basemaps=c('CartoDB.Positron', 'CartoDB.DarkMatter', 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'))

plyr::ldply(list.files(path="src/",
                       pattern="*.R",
                       full.names=TRUE),
            source)

park <- c("DEVA")

dist <- 0.3

park_boundary <- getParkBoundary(park=park)

park_buffer <- park_boundary %>% 
    sf::st_buffer(., dist = dist)

hydro_network <- getWatersheds(aoi = park_boundary, dist = 0)
flowlines <- hydro_network$flowlines
watershed <- hydro_network$watersheds %>%
  nngeo::st_remove_holes() %>%
  mutate(Watershed=as.numeric(relationship))

aquifers <- downloadAquifers(aoi=park_boundary, dist = dist)

visitor_stats <- getVisitation(type='park', startYear = 1900, endYear = 2022, units = park )

omernik <- downloadOmernik(aoi = boundary)

recharge <- downloadRecharge(aoi = aquifers, dist = dist)

nhd <- getNHD(aoi = boundary, dist = dist)
flowlines <- nhd$flowlines
catchments <- nhd$catchments
waterbodies <- nhd$waterbodies


nwis_park <- pullNWIS(aoi = park_boundary, dist = dist) %>%
  mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
  filter(threshold == "Current") %>%
mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
                   site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
                   site_type_cd %in% c("SP") ~ "Spring",
                   site_type_cd %in% c("ST") ~ "Stream",
                   site_type_cd %in% c("SB-CV") ~ "Cave"))
#select(site_no, site_name, parameter_type, date_range, n_obs, threshold, flow_data)

nwis_watershed <- pullNWIS(aoi = dplyr::summarize(watershed), dist = 0) %>%
  mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
  filter(threshold == "Current") %>%
mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
                   site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
                   site_type_cd %in% c("SP") ~ "Spring",
                   site_type_cd %in% c("ST") ~ "Stream",
                   site_type_cd %in% c("SB-CV") ~ "Cave"))

nwis_aquifer <- pullNWIS(aoi = dplyr::summarize(aquifers), dist = 0) %>%
    mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
  filter(threshold == "Current") %>%
mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
                   site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
                   site_type_cd %in% c("SP") ~ "Spring",
                   site_type_cd %in% c("ST") ~ "Stream",
                   site_type_cd %in% c("SB-CV") ~ "Cave"))

park <- c("MOJA","JOTR")

dist <- 0.3

other_park_boundary <- getParkBoundary(park=park)

other_park_buffer <- park_boundary %>% 
    sf::st_buffer(., dist = dist)

other_hydro_network <- getWatersheds(aoi = park_boundary, dist = 0)

other_watershed <- hydro_network$watersheds %>%
  nngeo::st_remove_holes() %>%
  mutate(Watershed=as.numeric(relationship))

other_aquifers <- downloadAquifers(aoi=park_boundary, dist = dist)


other_nwis_park <- pullNWIS(aoi = park_boundary, dist = dist) %>%
  mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
  filter(threshold == "Current") %>%
mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
                   site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
                   site_type_cd %in% c("SP") ~ "Spring",
                   site_type_cd %in% c("ST") ~ "Stream",
                   site_type_cd %in% c("SB-CV") ~ "Cave"))
#select(site_no, site_name, parameter_type, date_range, n_obs, threshold, flow_data)

other_nwis_watershed <- pullNWIS(aoi = dplyr::summarize(watershed), dist = 0) %>%
  mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
  filter(threshold == "Current") %>%
mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
                   site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
                   site_type_cd %in% c("SP") ~ "Spring",
                   site_type_cd %in% c("ST") ~ "Stream",
                   site_type_cd %in% c("SB-CV") ~ "Cave"))

other_nwis_aquifer <- pullNWIS(aoi = dplyr::summarize(aquifers), dist = 0) %>%
    mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
  filter(threshold == "Current") %>%
mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
                   site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
                   site_type_cd %in% c("SP") ~ "Spring",
                   site_type_cd %in% c("ST") ~ "Stream",
                   site_type_cd %in% c("SB-CV") ~ "Cave"))
```

This report aims to update NPS on our progress related to **Task 1 in our Statement of Work:**

1.  *Compile available data and information describing the hydrology, climate, and water supplies of priority NPS-identified parks (e.g., DEVA, JOTR, and MOJA).*

-   *Examples: Hydrologic data may include stream and spring flow data, groundwater level data, and water quality data associated with specific sources of NPS water supplies or suitable analogs. This may also include information describing contributing basins (e.g., catchment areas, groundwater recharge areas, surface water/groundwater interaction, and output from water balance models). Climate data may include historical precipitation and temperature data and locations and monitored parameters of weather stations and SNOTEL sites. Water supply information may include types of supplies (i.e., surface water or groundwater), point-of-diversion locations, diversion amounts, NPS-observed supply challenges, etc.*â€¯

# Approach

We have developed several self-contained (i.e., no local data inputs necessary) functions in R that pull relevant data sets for any selected park unit(s) in the contiguous US in the National Park System. Data can primarily be pulled and organized in three separate ways: 1) by park unit, 2) by watershed, or 3) by principal shallow aquifer.

Park unit boundaries are downloaded from the NPS-IRMA Data Store and used to select watershed and aquifer features. Watersheds are delineated using the R package `nhdplusTools` and represent the contributing areas for all surface waters in the park. Meanwhile, we have also developed the option of pulling data associated with *Principal Aquifers of the 48 Conterminous United States, Hawaii, Puerto Rico, and the U.S. Virgin Islands* ([USGS, 2003](https://water.usgs.gov/GIS/metadata/usgswrd/XML/aquifers_us.xml#stdorder)). Because many of these aquifers extend across large swaths of the US, we embedded an option to clip aquifer extents by a chosen distance outside of the park boundary (e.g., clipping associated aquifer extents to 30 km around the park boundary). This same option is available when pulling by watershed.

```{r}

pal_ws <- wesanderson::wes_palette("FantasticFox1", 50, type = "continuous")
pal_aq <- wesanderson::wes_palette("Zissou1", 29, type = "continuous")


watershed_map <- ggplot() +
  theme_void() +
  geom_sf(data = aquifers, color = NA, fill = NA, alpha = 0.75) +
  geom_sf(data = watershed, color = NA, aes(fill = Watershed)) +
  geom_sf(data = distinct(nwis_watershed, site_no, .keep_all = TRUE), color = 'black', fill = NA, alpha = 1, aes(shape = site_type)) +
  scale_fill_gradientn(colours = pal_ws) +
  geom_sf(data = park_boundary, fill = NA, color="black", size=1) +
  theme(legend.position="none",
        plot.title=element_text(hjust=0, vjust= 0)) +
  guides(fill=FALSE, color=FALSE) +
  ggtitle("Watersheds")


aquifer_map <- ggplot() +
  theme_void() +
  geom_sf(data = aquifers, color = NA, aes(fill = OBJECTID_1), alpha = 0.75) +
  geom_sf(data = watershed, color = NA, fill = NA) +
  #scale_fill_manual(values = wesanderson::wes_palette("Zissou1", n = 4))+
  geom_sf(data = distinct(nwis_aquifer, site_no, .keep_all = TRUE), color = 'black', fill = NA, alpha = 1, aes(shape = site_type)) +
  geom_sf(data = park_boundary, fill = NA, color="black", size=1) +
  scale_fill_gradientn(colours = pal_aq) +
  theme(legend.position="none",
        plot.title=element_text(hjust=0, vjust=0)) +
  guides(fill=FALSE, color=FALSE) +
  ggtitle("Aquifers")

park_map <- ggplot() +
  theme_void() +
  geom_sf(data=aquifers, color=NA, fill=NA, alpha=0.75) +
  #scale_fill_manual(values = wesanderson::wes_palette("Zissou1", n = 4))+
  geom_sf(data=watershed, color=NA, fill=NA) +
  geom_sf(data=park_buffer, fill = "#74a089", color=NA, size=NA, alpha=0.3) +
   geom_sf(data=park_boundary, fill = "#74a089", color="black", size=1) +
  geom_sf(data = distinct(nwis_park, site_no, .keep_all = TRUE), color = 'black', fill=NA, alpha=1, aes(shape = site_type)) +
  ggspatial::annotation_scale(location = "bl", width_hint = 0.5) +
  ggspatial::annotation_north_arrow(location = "bl", which_north = "true",
                                    pad_x = unit(0.25, "in"), pad_y = unit(0.25, "in"),
                                    style = ggspatial::north_arrow_fancy_orienteering) +
  theme(legend.position="none",
        plot.title=element_text(hjust=0, vjust= 0)) +
   guides(fill=FALSE, color=FALSE) +
  labs(shape="Site Type") +
  ggtitle("Park Boundary")


ggpubr::ggarrange(park_map, watershed_map, aquifer_map, nrow=1, common.legend=TRUE, legend="right")
```

Currently, our focus has been to mine data sets that are available across CONTUS; this is mostly so that the bulk of our analyses can be consistent and comparable across park units.

CONTUS-Wide Datasets

| Name                | Underlying Data                                                                                                                                                                 | Data Type                | Function                                                                                                                                                 | Input(s)                                                                            |
|------------|----------------------|------------|----------------|------------|
| getVisitation()     | [NPS-IRMA STATS](https://irma.nps.gov/STATS/)                                                                                                                                   | Table                    | Download park visitor statistics, by park or NPS-wide.                                                                                                   | Park unit code(s)                                                                   |
|                     |                                                                                                                                                                                 |                          |                                                                                                                                                          |                                                                                     |
| downloadOmernik()   | [EPA Omernik Ecoregions](https://www.epa.gov/eco-research/level-iii-and-iv-ecoregions-continental-united-states)                                                                | Polygons                 | Download Omernik III Ecoregions intersecting park boundaries.                                                                                            | Park boundaries, distance to go outside of park boundaries                          |
| downloadRecharge()  | Estimated mean annual natural ground-water recharge in the conterminous United States ([Wollock, 2003](https://water.usgs.gov/GIS/metadata/usgswrd/XML/rech48grd.xml#stdorder)) | Raster                   | Clip groundwater recharge raster to park boundaries.                                                                                                     | Park boundaries, distance to go outside of park boundaries                          |
|                     |                                                                                                                                                                                 |                          |                                                                                                                                                          |                                                                                     |
| getNHD()            | [National Hydrography Dataset (NHD)](https://usgs-r.github.io/nhdplusTools/)                                                                                                    | Shapefiles               | Download flowlines and waterbodies within park boundaries.                                                                                               | Park boundaries, distance to go outside of park boundaries                          |
|                     |                                                                                                                                                                                 |                          |                                                                                                                                                          |                                                                                     |
| pullUSGS()          | [USGS-NWIS](https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html)                                                                                 | Table (with coordinates) | Inventory of available USGS data. Includes information about type (e.g., instantaneous, continuous); system (e.g., surface, groundwater); and parameter. | Park boundaries, distance to go outside of park boundaries                          |
| downloadFlowUSGS()  | [USGS-NWIS](https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html)                                                                                 | Table (with coordinates) | Download all flow-specific data from USGS.                                                                                                               | Park boundaries, distance to go outside of park boundaries, time frame for download |
| downloadAquarius()  | [NPS-IRMA Aquarius](https://irma.nps.gov/AQWebPortal/Data/Map)                                                                                                                  | Table (with coordinates) | Download all Aquarius data associated with park unit(s), then munge into one, tidied data frame.                                                         | Park unit code(s)                                                                   |
| downloadWQP()       | [US Water Quality Portal (WQP)](https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html)                                                             | Table (with coordinates) | Download all WQP data associated with park unit(s).                                                                                                      | Park boundaries, distance to go outside of park boundaries                          |
| getNOAA()           |                                                                                                                                                                                 |                          |                                                                                                                                                          |                                                                                     |
| getSNOTEL()         |                                                                                                                                                                                 |                          |                                                                                                                                                          |                                                                                     |
| pullDataStore()     | [NPS-IRMA Data Store](https://irma.nps.gov/DataStore/)                                                                                                                          | Table                    | Inventory of water rights dockets and geospatial data from NPS-IRMA                                                                                      |                                                                                     |
| downloadDataStore() | [NPS-IRMA Data Store](https://irma.nps.gov/DataStore/)                                                                                                                          |                          | Downloads water rights dockets and geospatial data from NPS-IRMA                                                                                         |                                                                                     |
|                     |                                                                                                                                                                                 |                          |                                                                                                                                                          |                                                                                     |
|                     |                                                                                                                                                                                 |                          |                                                                                                                                                          |                                                                                     |
| getBuildings()      | [NPS-ArcGIS](https://mapservices.nps.gov/arcgis/rest/services/NationalDatasets)                                                                                                 | Shapefiles               | Download buildings within park boundaries.                                                                                                               | Park boundaries                                                                     |

Park-Specific Datasets

| Name        | Underlying Data                                                                                                                       | Data Type                | Function                                                                           | Input(s)                                                   |
|--------------|------------------|--------------|--------------|--------------|
| geteWRIMS() | [California Electronic Water Rights Information System](https://www.waterboards.ca.gov/waterrights/water_issues/programs/ewrims/)[^1] | Table (with coordinates) | Downloads California water right point of diversions associated with park unit(s). | Park boundaries, distance to go outside of park boundaries |
|             |                                                                                                                                       |                          |                                                                                    |                                                            |
|             |                                                                                                                                       |                          |                                                                                    |                                                            |
|             |                                                                                                                                       |                          |                                                                                    |                                                            |

[^1]: California-specific.

-   
-   
-   Stream and spring flow data: USGS-NWIS, Aquarius
-   Groundwater level data: USGS-NWIS, Aquarius
-   Water quality data associated with specific sources of NPS water supplies: PODs in combination with WQP, Aquarius, NWIS. Depending on the type of water supply, can link data based on the shallow aquifer area of interest or watershed.
-   Catchment areas: NHD-derived watersheds
-   Groundwater recharge areas: Estimated mean annual natural ground-water recharge in the conterminous United States ([Wollock, 2003](https://water.usgs.gov/GIS/metadata/usgswrd/XML/rech48grd.xml#stdorder))
-   Surface water/groundwater interaction
-   Output from water balance models
-   Historical precipitation and temperature data
-   Other monitored parameters of weather stations and SNOTEL sites
-   Water supply information including types of supplies (i.e., surface water or groundwater), point-of-diversion locations, diversion amounts: California eWRIMS, Nevada
-   NPS-observed supply challenges

Here we demonstrate the functionality of our workflow across three national parks: Death Valley, Mojave Desert, and Joshua Tree.

**Park basics**

Death Valley National Park (DEVA) was established in \_\_ and is located in the `r if(n_distinct(omernik$NA_L3NAME)==1){print(unique(omernik$NA_L3NAME))} else {print(paste0(unique(omernik$NA_L3NAME), collapse=" and "), quote=FALSE)}` level three ecregion`r if(n_distinct(omernik$NA_L3NAME)>1){print('s')}` (Omernik & Griffith, 2014) of \_\_\_ and \_\_. Since \_\_, visitor use has \_\_ at a rate of \_\_, with the highest attendance recorded as \_\_ in \_\_. There are approximately \_\_ designated areas within \_\_ miles of the park, with \_\_ being the largest with a population of \_\_.

# Pulling geospatial data

We have developed code to download data from any of the data sets above that is contained within either 1) the park unit boundary, 2) watersheds associated with the park boundary, or 3) shallow aquifers associated with the park boundary.

**An inventory of available data from the US Geological Survey (USGS)'s National Water Information System.**

```{r}
nwis_inventory <- pullFlowUSGS(aoi = aoi, dist = dist) 

current_nwis <- nwis_inventory %>%
  mutate(threshold=ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
  mutate(parameter_type=paste0(parameter, " (", data_type, ", ", site_type, ")"),
         date_range=ifelse(lubridate::year(begin_date)==lubridate::year(end_date), lubridate::year(end_date), paste0(year(begin_date),"-",year(end_date)))) %>%
mutate(flow_data=ifelse(grepl("discharge|flow|height|level|width",parameter_type,ignore.case=T)&!grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
  select(site_no,site_name,parameter_type,date_range,n_obs,within_park,threshold,flow_data)
```

There are `r as.numeric(current_nwis %>% filter(within_park == "Within", threshold=="Current") %>% distinct(site_no) %>% n_distinct())` USGS gages that have collected data since `r lubridate::year(Sys.Date())-5` within `r park` 's park boundary. There are an additional `as.numeric(current_nwis %>% filter(within_park=="Outside", threshold=="Current") %>% distinct(site_no) %>% n_distinct())` monitoring locations when one extends outside of the park (by `r dist` decimal degrees, approximately `dist*11.1` km).

```{r}
  mapview(filter(current_nwis, threshold == "Current"), zcol='flow_data', layer.name = 'Current Data') + 
  mapview(filter(current_nwis, threshold == "Old"), zcol='flow_data', cex=3, alpha = 1, layer.name = 'Older NWIS Locations') +
  mapview(aoi,col.regions="#009E73",alpha = 1, legend = F)
```

## Current Flow Data

```{r}
current_nwis %>%
  filter(flow_data=="Flow",
         threshold=="Current") %>%
  sf::st_drop_geometry() %>%
  arrange(desc(site_name)) %>%
  kableExtra::kable('html') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='900px',height='500px')
```

# Aquarius

```{r}
#aquarius <- downloadAquarius(park="DEVA") 
aquarius <- read_csv('data/quarto/aquarius.csv')

aquarius_inventory <- aquarius %>%
  mutate(timestamp = ymd_hms(timestamp),
         year = year(timestamp)) %>%
  group_by(siteID, Location.Type, parameter, Long, Lat, EPSG) %>%
  summarize(n_obs = n(),
            threshold = ifelse(max(year) >= (lubridate::year(Sys.Date())-5), "Current", "Old"),
            range = ifelse(min(year) == max(year), paste0(min(year)), paste0(min(year), "-", max(year)))) %>%
  mutate(flow_data=ifelse(grepl("velocity|WaterPressure|discharge|flow|height|level|stage|depthtowater",parameter,ignore.case=T)&!grepl("sediment",parameter,ignore.case=T), "Flow", "Other")) %>%
  sf::st_as_sf(coords=c("Lat","Long"), crs=4326)
```

There are `r aquarius_inventory %>% as_tibble() %>%  dplyr::filter(threshold == "Current") %>% distinct(siteID, .keep_all = FALSE) %>% n_distinct()` Aquarius monitoring locations that have collected data since `r lubridate::year(Sys.Date())-5` within `r park` 's park boundary. `r as.numeric(aquarius_inventory %>% as_tibble() %>% filter(threshold=="Current" & flow_data=="Flow") %>% distinct(siteID,.keep_all=F) %>% n_distinct())` of those sites monitor flow-related parameters.

```{r}
mapview(filter(aquarius_inventory, threshold == "Current"), zcol='flow_data', layer.name = 'Current Data') + 
  mapview(filter(aquarius_inventory, threshold == "Old"), zcol='flow_data', cex=3, alpha = 1, layer.name = 'Older Aquarius Locations') +
  mapview(aoi,col.regions="#009E73",alpha = 1, legend = F)

```

```{r}
aquarius_inventory %>%
  filter(flow_data=="Flow",
         threshold=="Current") %>%
  sf::st_drop_geometry() %>%
  arrange(desc(siteID)) %>%
  kableExtra::kable('html') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='900px',height='500px')
```

# WQP

```{r}
sites <- downloadWQPSites(aoi,dist)

data <- downloadWQPData(sites=sites) %>%
  rename(SiteID=MonitoringLocationIdentifier,
         date=ActivityStartDate,
         time=ActivityStartTime.Time,
         parameter=CharacteristicName,
         org=OrganizationFormalName,
         org_id=OrganizationIdentifier,
         value=ResultMeasureValue,
         original_units=ResultMeasure.MeasureUnitCode,
         sample_method=SampleCollectionMethod.MethodName,
         analytical_method=ResultAnalyticalMethod.MethodName,
         particle_size=ResultParticleSizeBasisText,
         media=ActivityMediaName,
         type=ActivityMediaSubdivisionName,
         sample_depth=ActivityDepthHeightMeasure.MeasureValue,
         sample_depth_unit=ActivityDepthHeightMeasure.MeasureUnitCode,
         fraction=ResultSampleFractionText,
         status=ResultStatusIdentifier)
```

# Water Rights

```{r}
water_rights <- geteWRIMS(aoi=aoi, dist=dist)
```

We were unable to access several relevant data sets:

-   NPS geospatial layer representing [all buildings within park units](https://mapservices.nps.gov/arcgis/rest/services/NationalDatasets). The layer appears to be broken. We intend to use this geospatial layer to identify locations that water is sent to, in an attempt to make a first pass at where NPS water rights go, and where water rights might be leased.

-   Worklow linked to customizing outputs for the [*What water balance product do you need?*](https://screenedcleanedsummaries.s3.us-west-2.amazonaws.com/which_water_balance.html)dataset*.* This requires NPS VPN access. Currently, we are just pulling the pre-existing datasets, and clipping their geometries to the areas of interest.

-   [Projections of freshwater use in the United States under climate change](https://www.fs.usda.gov/research/treesearch/63896). We are unable to find the public dataset, but we have reached out to the primary author for access.
