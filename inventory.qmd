---
title: "usgs_park_data_puller"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(sf)
library(mapview)
library(rvest)
library(dataRetrieval)
library(lubridate)
library(nhdplusTools)

#COLOR-BLIND PALLETTE:#
#scales::show_col(colorblind_pal()(8))
```

## USGS NWIS DATA

Pull in NPS park boundaries, select all USGS gaging stations within 0.25 decimal degrees of park boundaries.

```{r}
sf_use_s2(FALSE) #remove spherical geometry

parks <- st_read('data/all/nps_boundary/nps_boundary.shp') %>%
  filter(UNIT_CODE%in%c('DEVA','MOJA','JOTR')) %>%
  select(UNIT_CODE)

park_bufs <- st_buffer(parks,0.25) #distance in decimal degrees

bbox <- st_bbox(park_bufs) %>%
  as.vector() %>%
  round(., digits=7) %>% 
  paste(collapse = ",")

sites <- whatNWISdata(bBox = bbox) %>% 
  st_as_sf(coords=c('dec_long_va','dec_lat_va'),crs=4269) %>%
  .[park_bufs,] 

#mapview(sites) + mapview(parks)
```

Filter gaging station data to only datasets that have current (\>=2018) data, and datasets that span more than one year (for now)

```{r}
good_sites <- sites %>%
  mutate(end_year=year(ymd(end_date)),
         start_year=year(ymd(begin_date)),
         record=end_year-start_year) %>%
  filter(end_year >= 2018,
         record > 1)
```

Download USGS parameter code descriptors to link to the output from `whatNWISdata()`, which does not have a description of data type (e.g., streamflow discharge, conductivity, groundwater levels, etc. etc.). Instead whatNWIS data only includes the numerical parameter codes for those data types. Then, filter datatsets that are associated with either water quantity or quality

```{r}
site_url <- 'https://help.waterdata.usgs.gov/parameter_cd?group_cd=%'

tables <- read_html(site_url) %>%
  html_nodes('table') %>%
  html_table()

pcodes <-tables[[1]] %>%
  janitor::clean_names() %>%
  mutate(parm_cd=str_pad(as.character(parameter_code),5,pad="0"))

final_nwis_list <- good_sites %>%
  left_join(pcodes,by="parm_cd") %>%
  filter(!is.na(parameter_name_description),
         group_name=="Physical") %>%
  select(c(site_no,
           site_name=station_nm,
           n_obs=count_nu,
           begin_date,
           end_date,
           parameter=parameter_name_description,
           code=parm_cd)) %>%
  st_intersection(park_bufs)

quantity <- final_nwis_list %>%
  filter(grepl("discharge|flow|height|level|width",ignore.case=T,parameter))

quality <- final_nwis_list %>%
  filter(!grepl("discharge|flow|height|level|width|air|precip|pressure",ignore.case=T,parameter))

mapviewOptions(basemaps.color.shuffle=FALSE,basemaps=c('CartoDB.Positron', 'CartoDB.DarkMatter', 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'))

mapview(quality,col.regions="#F0E442")+mapview(quantity,col.regions="#0072B2")+mapview(parks,col.regions="#009E73",alpha=0.8)
```

Download flow data

```{r}
sites <- quantity %>%
  distinct(site_no)

codes <- quantity %>%
  distinct(code)

# flow_data_dv <- readNWISdv(sites$site_no, parameterCd = codes$code) %>%
#     dplyr::filter(X_00060_00003_cd  %in% c("A","A e" ,"A R","A [4]","A <","A >")|
#                   X_72019_00003_cd %in% c("A","A e" ,"A R","A [4]","A <","A >")) %>%
#   select(site_no,
#          date=Date,
#          discharge=X_00060_00003,
#          depth=X_72019_00003) %>% 
#   left_join(select(final_nwis_list,site_no,UNIT_CODE),by='site_no') %>%
#   st_drop_geometry() %>%
#   select(-geometry) %>%
#   write_csv('data/all/daily_flow.csv')

#still working on this
#siter<-sites$site_no[298:nrow(sites)]

continuous_funk <- function(siter){
  readNWISuv(siter, parameterCd = codes$code) %>%
    write_csv(paste0('data/raw/',siter,'.csv'))
}

purrr::map(siter,continuous_funk)
```

## NHD Data

```{r}
aoi <- park_bufs %>% summarize()

nhd_flowlines <- get_nhdplus(AOI = aoi, 
                         realization='flowline')

nhd_catchments <- get_nhdplus(AOI=aoi, 
                          realization='catchment')

nhd_waterbodies <- get_waterbodies(AOI=aoi)
```


## California Water Rights Data

```{r}
ca_wr <- st_read('data/all/eWRIMS_Data.gdb') %>%
  st_transform(crs=4269)

table <- st_read('data/all/eWRIMS_Data.gdb', layer = "POD_Attributes")

nearby_wr <- ca_wr %>%
  select(POD_ID,LATITUDE,LONGITUDE,DIVERSION_SITE_NAME,SOURCE_NAME) %>%
  inner_join(., table, by=c("POD_ID"="CORE_POD_ID")) %>%
  st_intersection(., park_bufs) %>%
  mutate(RELATIONSHIP=ifelse(grepl("National Park", LAST_NAME, ignore.case=T), "PARK","NONPARK"))

mapview(within,cex=5) + mapview(nps_within, col.regions="#009E73",cex=8, alpha=1) + mapview(parks)
```

