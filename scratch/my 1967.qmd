---
title: "Task 1: Hydrology, Climate, and Water Supply Data Inventory for Pilot Parks"
author: "Kathryn Willi (ROSSyndicate), Caitlin Mothes (Geospatial Centroid)"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(mapview)
library(lubridate)
library(sf)
try(plyr::ldply(list.files(path="src/",
                       pattern="*.R",
                       full.names=TRUE),
            source))

cb <- c("#000000", #black
        "#E69F00", #light orange
        "#56B4E9", #light blue
        "#009E73", #green
        "#F0E442", #yellow
        "#0072B2", #dark blue
        "#D55E00", #dark orange
        "#CC79A7", #pink
        "white")

park <- c("DEVA")

dist <- 0.3

park_boundary <- getParkBoundary(park=park)

park_buffer <- park_boundary %>% 
    sf::st_buffer(., dist = dist)

#watershed <- getWatersheds(aoi = park_boundary, dist = 0)
watershed <- st_read('data/all/DEVA_group_watersheds.shp')# %>% group_by(UNIT_CODE) %>% summarize()
flowlines <- nhdplusTools::get_nhdplus(AOI = watershed, 
                                                realization='flowline')
```

# WATER RIGHTS:: FIX YOU. NV AND CALIFORNIA ARE DIFFERENT DATA TYPES.

```{r}
# nv_water_rights <- getPODNevada(aoi=aoi, dist=0)  %>%
# mutate(POD_UNIT="ACRE FEET",
#        WR_WATER_RIGHT_ID = as.character(app)) %>%
# select(WR_WATER_RIGHT_ID, SOURCE_NAME=source_des, DIRECT_DIV_AMOUNT=diversio_1, POD_UNIT,POD_STATUS=app_status,
#        DIVERSION_TYPE=source, STORAGE_TYPE=mou, OWNER=owner_name, PARK_RIGHT) %>%
# mutate(STATE = "NV") %>%
#   saveRDS('data/all/nv_water_rights.RDS')
nv_water_rights <- readRDS('data/all/nv_water_rights.RDS')
# ca_water_rights <- geteWRIMS(aoi=aoi, dist=0) %>%
#   mutate(WR_WATER_RIGHT_ID=as.character(WR_WATER_RIGHT_ID))%>%
#   dplyr::select(WR_WATER_RIGHT_ID, SOURCE_NAME, DIRECT_DIV_AMOUNT, POD_UNIT, POD_STATUS,DIVERSION_TYPE, STORAGE_TYPE, OWNER=LAST_NAME, PARK_RIGHT=park_right) %>%
#   mutate(STATE = "CA") %>%
#   saveRDS('data/all/ca_water_rights.RDS')
ca_water_rights <- readRDS('data/all/ca_water_rights.RDS')
  
#both_wr <- sf::st_union(nv_water_rights,ca_water_rights) #%>%
#  st_write('data/all/ca_nv_rights.shp')

#both_wr <- st_read('data/all/ca_nv_rights.shp')

rights_ws_ca <- sf::st_intersection(ca_water_rights,watershed)
#rights_aquifer_ca <- sf::st_intersection(ca_water_rights,aquifers)
rights_park_ca <- sf::st_intersection(ca_water_rights,park_buffer)

rights_ws_nv <- sf::st_intersection(nv_water_rights,watershed)
#rights_aquifer_nv <- sf::st_intersection(nv_water_rights,aquifers)
rights_park_nv <- sf::st_intersection(nv_water_rights,park_buffer)

# ggplot() +
#   theme_void() +
#   geom_sf(data = aquifers, color = NA, aes(fill = OBJECTID_1), alpha = 0.75) +
#   geom_sf(data = watershed, color = "#abddde", fill = "#abddde", alpha=0.2) +
#   #scale_fill_manual(values = wesanderson::wes_palette("Zissou1", n = 4))+
#   geom_sf(data = ca_water_rights, alpha = 0.75, size=1.5, aes(shape = PARK_RIGHT)) +
#   geom_sf(data = park_boundary, fill = NA, color="black", size=0.1) +
#   scale_fill_gradientn(colours = pal_aq) +
#   theme(legend.position="none",
#         plot.title=element_text(hjust=0, vjust=0)) +
#   guides(fill=FALSE, color=FALSE) +
#   ggtitle("Water Right Points-of-Diversion")

pal_ws <- wesanderson::wes_palette("FantasticFox1", 50, type = "continuous")
pal_aq <- wesanderson::wes_palette("Zissou1", 29, type = "continuous")

watershed_map <- ggplot() +
  theme_void() +
   geom_sf(data = park_buffer, fill = NA, color=NA,  alpha=0.3) +
   geom_sf(data = watershed, color = NA, fill = "#abddde", alpha = 0.45) +
   geom_sf(data = flowlines, color = "#abddde", alpha = 0.85) +
   geom_sf(data = rights_ws_nv, color = 'black', fill = NA, alpha = 0.5, aes(shape = PARK_RIGHT)) +
  geom_sf(data=park_boundary, fill = NA, color="black", size=1) +
  geom_sf(data = rights_ws_ca, color = 'black', fill = NA, alpha = 0.5, aes(shape = PARK_RIGHT)) +
  geom_sf(data = rights_park_ca, color = "black", fill=NA, alpha=0) +
  geom_sf(data = rights_park_nv, color = "black", fill=NA, alpha=0) +
  scale_fill_gradientn(colours = pal_ws) +
  theme(legend.position="none",
        plot.title=element_text(hjust=0, vjust= 0)) +
  guides(fill=FALSE, color=FALSE) +
  ggtitle("Watersheds")

park_map <- ggplot() +
  theme_void() +
  geom_sf(data = rights_ws_nv, color = "black", fill = NA, alpha = 0) +
  geom_sf(data = rights_ws_ca, color = "black", fill = NA, alpha = 0) +
  geom_sf(data=watershed, color=NA, fill=NA) +
  geom_sf(data=park_buffer, fill = "#74a089", color=NA, size=NA, alpha=0.3) +
  geom_sf(data=park_boundary, fill = "#74a089", color="black", size=1) +
  geom_sf(data = rights_park_ca, color = 'black', fill=NA, alpha=0.5, aes(shape = PARK_RIGHT)) +
  geom_sf(data = rights_park_nv, color = 'black', fill=NA, alpha=0.5, aes(shape = PARK_RIGHT)) +
  ggspatial::annotation_scale(location = "bl", width_hint = 0.5) +
  ggspatial::annotation_north_arrow(location = "bl", which_north = "true",
                                    pad_x = unit(0.25, "in"), pad_y = unit(0.25, "in"),
                                    style = ggspatial::north_arrow_fancy_orienteering) +
  theme(legend.position="none",
        plot.title=element_text(hjust=0, vjust= 0)) +
   guides(fill=FALSE, color=FALSE) +
  labs(shape="Owner") +
  ggtitle("Park Boundary")


ggpubr::ggarrange(park_map, watershed_map, nrow=1, common.legend=TRUE, legend="right")
```

# NWIS Flow Locations

Sites with flow data recorded since 2015 within our areas of interest.

```{r}
# nwis_all <- pullNWIS(aoi = aoi, dist = 0) %>%
#   mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
#   mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
#          date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
#   #filter(threshold == "Current") %>%
# mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
#   mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
#                    grepl("GW|GW-", site_type_cd) ~ "Groundwater",
#                    site_type_cd %in% c("SP") ~ "Spring",
#                    site_type_cd %in% c("ST","ST-TS") ~ "Stream",
#                    site_type_cd %in% c("SB-CV") ~ "Cave",
#                    site_type_cd %in% c("ST-CA","ST-DCH") ~ "Canal/Ditch",
#                    site_type_cd == "ES" ~ "Estuary",
#                    site_type_cd == "LK" ~ "Lake",
#                    site_type_cd %in% c("SB") ~ "Subsurface",
#                    site_type_cd == "SB-GWD" ~ "Ground-water Drain",
#                    site_type_cd == "SB-TSM" ~ "Shaft/Tunnel",
#                    site_type_cd == "SB-GWD" ~ "Ground-water Drain",
#                    site_type_cd == "SB-UZ" ~ "Unsaturated Zone")) %>%
#   saveRDS('data/all/nwis_sites.RDS')
###

# nwis_park <- pullNWIS(aoi = park_boundary, dist = dist) %>%
#   mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
#   mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
#          date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
#   filter(threshold == "Current") %>%
# mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
#   mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
#                    site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
#                    site_type_cd %in% c("SP") ~ "Spring",
#                    site_type_cd %in% c("ST") ~ "Stream",
#                    site_type_cd %in% c("SB-CV") ~ "Cave"))
# #select(site_no, site_name, parameter_type, date_range, n_obs, threshold, flow_data)
# 
# nwis_watershed <- pullNWIS(aoi = dplyr::summarize(watershed), dist = 0) %>%
#   mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
#   mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
#          date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
#   filter(threshold == "Current") %>%
# mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
#   mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
#                    site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
#                    site_type_cd %in% c("SP") ~ "Spring",
#                    site_type_cd %in% c("ST") ~ "Stream",
#                    site_type_cd %in% c("SB-CV") ~ "Cave")) %>%
#   st_write('data/all/nwis_waterhed.shp')
# 
# nwis_aquifer <- pullNWIS(aoi = dplyr::summarize(aquifers), dist = 0) %>%
#     mutate(threshold = ifelse(lubridate::year(end_date) >= (lubridate::year(Sys.Date())-5), "Current", "Old")) %>%
#   mutate(parameter_type = paste0(parameter, " (", data_type, ", ", site_type, ")"),
#          date_range = ifelse(lubridate::year(begin_date) == lubridate::year(end_date), lubridate::year(end_date), paste0(lubridate::year(begin_date), "-", lubridate::year(end_date)))) %>%
#   filter(threshold == "Current") %>%
# mutate(flow_data = ifelse(grepl("discharge|flow|height|level|width", parameter_type,ignore.case=T) &! grepl("sediment",parameter_type,ignore.case=T), "Flow", "Other")) %>%
#   mutate(site_type=case_when(site_type_cd == "AT" ~ "Weather Station",
#                    site_type_cd %in% c("GW", "GW-TH") ~ "Groundwater",
#                    site_type_cd %in% c("SP") ~ "Spring",
#                    site_type_cd %in% c("ST") ~ "Stream",
#                    site_type_cd %in% c("SB-CV") ~ "Cave")) %>%
#   st_write('data/all/nwis_aquifer.shp')

# nwis_all <- nwis_park %>%
#   bind_rows(nwis_aquifer) %>%
#   distinct(.,.keep_all=TRUE)
#   bind_rows(nwis_watershed) %>%
#   distinct(.,.keep_all=TRUE) %>%
#   saveRDS(.,'data/all/nwis_all.RDS')
nwis_all <- readRDS('data/all/nwis_all.RDS') %>%
  mutate(site_type=ifelse(is.na(site_type),"Other",site_type)) %>%
  filter(flow_data=="Flow") %>%
  st_join(select(aoi_split,UNIT_CODE),left=TRUE) %>%
  distinct(.,.keep_all=TRUE) %>%
  select(UNIT_CODE,site_no,site_name,site_type,parameter_type,date_range,n_obs)
#####

pal_nwis <- wesanderson::wes_palette("FantasticFox1", 4, type = "continuous")
mapviewOptions(basemaps.color.shuffle=FALSE,basemaps=c('CartoDB.Positron', 'CartoDB.DarkMatter', 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'))

# mapview::mapview(park_boundary, col.regions="black", alpha.regions=0, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE) +
#    mapview(watershed, col.regions = "#abddde",legend=F, homebutton=FALSE, popup=FALSE) +
#   mapview::mapview(aquifers, col.regions = pal_aq, zcol='OBJECTID_1', popup=FALSE, legend=F, lwd =1, alpha.regions=0.5, homebutton=FALSE, label=FALSE) +
  mapview((nwis_all), col.regions = pal_nwis, zcol = 'site_type', alpha.regions=1, alpha=0.75, cex=5, layer.name="NWIS Flow Sites") +
mapview(aoi,col.regions="black", alpha.regions=0, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE) +
  mapview(park_boundary, col.regions="#74a089", alpha.regions=0.33, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE)
```

### NWIS Tabular

```{r}
nwis_all %>%
  sf::st_drop_geometry() %>%
  arrange(desc(site_name)) %>%
  kableExtra::kable('html') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='900px',height='500px')
```

# Recharge

```{r}
recharge <- downloadRecharge(aoi = aoi, dist = 0)

pal_recharge <- c("#F21A00","#E1AF00","#EBCC2A","#78B7C5","#3B9AB2")
  
wesanderson::wes_palette("Zissou1", 150, type = "continuous")

mapview(recharge[[1]], col.regions = pal_recharge, layer.name= "Monthly Groundwater Recharge Index") + 

mapview::mapview(park_boundary, col.regions="black", alpha.regions=0, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE) +
  mapview::mapview(aquifers, col.regions = "black", popup=FALSE, legend=F, lwd =1, alpha.regions=0, homebutton=FALSE, label=FALSE)
```

# Visitor Stats

```{r}
visitor_stats <- getVisitation(type='park', units=park, startYear = 1900, endYear = 2022) %>%
  group_by(UnitCode,Year) %>%
  summarize(Annual=sum(RecreationVisitors))

nps_stat <- getVisitation(type='total', startYear = 1900, endYear = 2022)  

stat_plot <- ggplot()+
  geom_point(data=visitor_stats, aes(x=Year, y=Annual, color=UnitCode)) +
  geom_line(data=visitor_stats, aes(x=Year, y=Annual, color=UnitCode)) +
  scale_color_manual(values=c(
        
        "#56B4E9", #light blue
        "#009E73", #green

        "#0072B2")) +
  theme_bw() +
  labs(color="Park Unit") +
  ylab("Annual Visitors") +
  scale_y_continuous(labels= scales::comma)
  
plotly::ggplotly(stat_plot)
  
```

# Aquarius

```{r}

# aquarius <- downloadAquarius(park=c("DEVA","MOJA","JOTR")) %>%
#   feather::write_feather(., 'data/all/all_aquarius.feather')

aquarius <- feather::read_feather('data/all/all_aquarius.feather')

aquarius_inventory <- aquarius %>%
  distinct(.keep_all=TRUE) %>%
  mutate(timestamp = lubridate::ymd_hms(timestamp),
         year = year(timestamp)) %>%
  group_by(siteID, Location.Type, parameter, Long, Lat, EPSG) %>%
  summarize(n_obs = n(),
            threshold = ifelse(max(year) >= (lubridate::year(Sys.Date())-5), "Current", "Old"),
            range = ifelse(min(year) == max(year), paste0(min(year)), paste0(min(year), "-", max(year)))) %>%
  mutate(flow_data=ifelse(grepl("velocity|WaterPressure|discharge|flow|height|level|stage|depthtowater",parameter,ignore.case=T)&!grepl("sediment",parameter,ignore.case=T), "Flow", "Other")) %>%
  dplyr::filter(flow_data=="Flow") %>%
  select(siteID, Location.Type, parameter, n_obs, range, Lat, Long) %>%
  sf::st_as_sf(coords=c("Lat","Long"), crs=4326)
```

```{r}
aquarius_pal <- c(
        "#E69F00", #light orange
        "#56B4E9", #light blue
        "#009E73", #green
        "#F0E442")


mapview(aquarius_inventory, zcol='Location.Type', col.regions=aquarius_pal, layer.name="Aquarius Sites") + 
  mapview::mapview(aoi, col.regions="black", alpha.regions=0, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE) +
    mapview(park_boundary, col.regions="#74a089", alpha.regions=0.33, lwd=2, popup=FALSE, legend=F, homebutton=FALSE,label=FALSE)
  
```

```{r}
aquarius_inventory %>%
  # filter(flow_data=="Flow",
  #        threshold=="Current") %>%
  #select(-c(threshold,flow_data, EPSG)) %>%
  sf::st_drop_geometry() %>%
  arrange(desc(siteID)) %>%
  kableExtra::kable('html') %>%
  kableExtra::kable_styling(position='center') %>%
  kableExtra::scroll_box(width='900px',height='500px')
```

# Water Quality Portal

```{r}
# now downloads all data, too:
sites <- downloadWQPSites(aoi,dist=0)

data <- downloadWQPData(sites) %>%
  rename(SiteID=MonitoringLocationIdentifier,
         date=ActivityStartDate,
         time=ActivityStartTime.Time,
         parameter=CharacteristicName,
         org=OrganizationFormalName,
         org_id=OrganizationIdentifier,
         value=ResultMeasureValue,
         original_units=ResultMeasure.MeasureUnitCode,
         sample_method=SampleCollectionMethod.MethodName,
         analytical_method=ResultAnalyticalMethod.MethodName,
         particle_size=ResultParticleSizeBasisText,
         media=ActivityMediaName,
         type=ActivityMediaSubdivisionName,
         sample_depth=ActivityDepthHeightMeasure.MeasureValue,
         sample_depth_unit=ActivityDepthHeightMeasure.MeasureUnitCode,
         fraction=ResultSampleFractionText,
         status=ResultStatusIdentifier)
```

# SNOTEL

```{r}
snotel <- getSNOTEL(aoi=aoi, dist=0, years = c('2022','2021','2020','2019','2018','2017'), save=TRUE, path='data/all/SNOTEL.shp')
```

We were unable to access several relevant data sets:

-   NPS geospatial layer representing [all buildings within park units](https://mapservices.nps.gov/arcgis/rest/services/NationalDatasets). The layer appears to be broken. We intend to use this geospatial layer to identify locations that water is sent to, in an attempt to make a first pass at where NPS water rights go, and where water rights might be leased.

-   Worklow linked to customizing outputs for the [*What water balance product do you need?*](https://screenedcleanedsummaries.s3.us-west-2.amazonaws.com/which_water_balance.html)dataset*.* This requires NPS VPN access. Currently, we are just pulling the pre-existing datasets, and clipping their geometries to the areas of interest.

-   [Projections of freshwater use in the United States under climate change](https://www.fs.usda.gov/research/treesearch/63896). We are unable to find the public dataset, but we have reached out to the primary author for access.
